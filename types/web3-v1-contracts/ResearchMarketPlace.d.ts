/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogFeeUpdated = ContractEventLog<{
  applicationFee: string;
  0: string;
}>;
export type LogResearchProjectAccepted = ContractEventLog<{
  applicant: string;
  id: string;
  0: string;
  1: string;
}>;
export type LogResearchProjectRejected = ContractEventLog<{
  applicant: string;
  id: string;
  0: string;
  1: string;
}>;
export type LogResearchProjectRequest = ContractEventLog<{
  applicant: string;
  projectId: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface ResearchMarketPlace extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ResearchMarketPlace;
  clone(): ResearchMarketPlace;
  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(): NonPayableTransactionObject<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * circit breaker to pause certin funnctinallity, inherits of openzepllin library
     */
    pause(): NonPayableTransactionObject<boolean>;

    /**
     * circit breaker to unpause certin funnctinallity, inherits of openzepllin library
     */
    unPause(): NonPayableTransactionObject<boolean>;

    /**
     * updates marketplace fee, sender must pay fee to reqest project concideration (function: requestResearchPrjoect)
     * @param _feePrice amount of wei the fee should be
     */
    updateFeePrice(
      _feePrice: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * should add param validationn
     * sender can set project details
     * @param email Contact email particapnts can reach project owner on
     * @param entityName Name of the entity deplying the project (eg cancer research)
     * @param phone Phone number participants can reach project owner on
     * @param projectName Descriptive title of the project
     */
    requestResearchPrjoect(
      projectName: string,
      email: string,
      entityName: string,
      phone: string
    ): PayableTransactionObject<void>;

    /**
     * factory function, removes project from pending project and adds to acceptedDeploys a ptoject contract, sets owner and intial params set by requester on applyingsets the contract address in the exsisting project struct
     * @param _id id of the prject in the requests list
     */
    acceptResearchProject(
      _id: number | string
    ): NonPayableTransactionObject<boolean>;

    /**
     * rejects research prject, removes from requested EnumerableSet and adds to rejected
     * @param _id id of the project to reject
     */
    rejectResearchProject(
      _id: number | string
    ): NonPayableTransactionObject<boolean>;

    /**
     * get marketplace fee price, state var private as only this contract should update
     */
    getFeePrice(): NonPayableTransactionObject<string>;

    /**
     * loops requested projects and creates uint256 array of project ID's
     */
    getPendingResearchProjects(): NonPayableTransactionObject<string[]>;

    /**
     * get information about a project
     * @param _id id of the proejct
     */
    getResearchProjectById(
      _id: number | string
    ): NonPayableTransactionObject<{
      owner: string;
      projectName: string;
      email: string;
      phone: string;
      entityName: string;
      projectId: string;
      projectContract: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    /**
     * loops accepted projects and creates uint256 array of project ID's
     */
    getAcceptedresearchProjects(): NonPayableTransactionObject<string[]>;

    /**
     */
    getMarketPlaceBalance(): NonPayableTransactionObject<string>;

    /**
     * sends contract balance to the owner
     */
    withdraw(amount: number | string): NonPayableTransactionObject<boolean>;
  };
  events: {
    LogFeeUpdated(cb?: Callback<LogFeeUpdated>): EventEmitter;
    LogFeeUpdated(
      options?: EventOptions,
      cb?: Callback<LogFeeUpdated>
    ): EventEmitter;

    LogResearchProjectAccepted(
      cb?: Callback<LogResearchProjectAccepted>
    ): EventEmitter;
    LogResearchProjectAccepted(
      options?: EventOptions,
      cb?: Callback<LogResearchProjectAccepted>
    ): EventEmitter;

    LogResearchProjectRejected(
      cb?: Callback<LogResearchProjectRejected>
    ): EventEmitter;
    LogResearchProjectRejected(
      options?: EventOptions,
      cb?: Callback<LogResearchProjectRejected>
    ): EventEmitter;

    LogResearchProjectRequest(
      cb?: Callback<LogResearchProjectRequest>
    ): EventEmitter;
    LogResearchProjectRequest(
      options?: EventOptions,
      cb?: Callback<LogResearchProjectRequest>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LogFeeUpdated", cb: Callback<LogFeeUpdated>): void;
  once(
    event: "LogFeeUpdated",
    options: EventOptions,
    cb: Callback<LogFeeUpdated>
  ): void;

  once(
    event: "LogResearchProjectAccepted",
    cb: Callback<LogResearchProjectAccepted>
  ): void;
  once(
    event: "LogResearchProjectAccepted",
    options: EventOptions,
    cb: Callback<LogResearchProjectAccepted>
  ): void;

  once(
    event: "LogResearchProjectRejected",
    cb: Callback<LogResearchProjectRejected>
  ): void;
  once(
    event: "LogResearchProjectRejected",
    options: EventOptions,
    cb: Callback<LogResearchProjectRejected>
  ): void;

  once(
    event: "LogResearchProjectRequest",
    cb: Callback<LogResearchProjectRequest>
  ): void;
  once(
    event: "LogResearchProjectRequest",
    options: EventOptions,
    cb: Callback<LogResearchProjectRequest>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
