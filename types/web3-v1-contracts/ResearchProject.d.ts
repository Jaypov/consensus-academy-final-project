/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LogAcceptedParticipnt = ContractEventLog<{
  applicant: string;
  0: string;
}>;
export type LogApplyForResearchProject = ContractEventLog<{
  applicant: string;
  0: string;
}>;
export type LogHardCapUpdate = ContractEventLog<{
  value: string;
  0: string;
}>;
export type LogProjectEnded = ContractEventLog<{
  ended: boolean;
  0: boolean;
}>;
export type LogProjectInRegistration = ContractEventLog<{
  projectId: string;
  0: string;
}>;
export type LogProjectStarted = ContractEventLog<{
  projectId: string;
  0: string;
}>;
export type LogRejectedParticipnt = ContractEventLog<{
  applicant: string;
  0: string;
}>;
export type LogRewardUpdate = ContractEventLog<{
  value: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface ResearchProject extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ResearchProject;
  clone(): ResearchProject;
  methods: {
    entityName(): NonPayableTransactionObject<string>;

    hardCap(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    participntCount(): NonPayableTransactionObject<string>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(): NonPayableTransactionObject<boolean>;

    prjectId(): NonPayableTransactionObject<string>;

    projectName(): NonPayableTransactionObject<string>;

    projectOwner(): NonPayableTransactionObject<string>;

    projectStatus(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardSize(): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * circit breaker to pause certin funnctinallity, inherits of openzepllin library
     */
    pause(): NonPayableTransactionObject<boolean>;

    /**
     * circit breaker to unpause certin funnctinallity, inherits of openzepllin library
     */
    unPause(): NonPayableTransactionObject<boolean>;

    /**
     * updates hard cap, hardcap can stay at 0 to set no limit. Only callable when configurable enum is 0
     * @param _amount uint of how many participants are needed
     */
    updateHardCap(
      _amount: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * updates reward amount in wei, Only callable when config enum is 0
     * @param _amount uint in wei of reward
     */
    updateRewardAmount(
      _amount: number | string
    ): NonPayableTransactionObject<string>;

    /**
     * sets configurable enum to 1, disables configurable functions
     */
    openResearchProjectRegistration(): NonPayableTransactionObject<boolean>;

    /**
     * removes participannt from pending set to accepted set and adds params to struct when configurable enum is 1
     * @param _address of the participant to accept
     */
    acceptParticipnt(_address: string): NonPayableTransactionObject<boolean>;

    /**
     * could check exsistance
     * removes participant from pending applicants when configurable enum is 1
     * @param _address of participant to reject
     */
    rejectParticipnt(_address: string): NonPayableTransactionObject<boolean>;

    /**
     * could check exsistance and revert id user is already in set
     * adds address to pending applicants set when configurable enum is 1
     */
    applyForResearchProject(): NonPayableTransactionObject<boolean>;

    /**
     * sets configurable state to 2 if there is atleast 1 participant, contract has enough wei to pay them and configurable enum is 1
     */
    startResearchProject(): NonPayableTransactionObject<boolean>;

    /**
     * sets configurable state to 3
     */
    endResearchProject(): NonPayableTransactionObject<boolean>;

    /**
     * sets addresses struct feild complete, to true. Allows patient to withdraw form contract when configurable enum is set to 2
     * @param _address addres of the participant
     */
    participntObligationMet(
      _address: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * returns current details for the project
     */
    getProjectDetails(): NonPayableTransactionObject<{
      owner: string;
      id: string;
      title: string;
      entity: string;
      cap: string;
      participntsCount: string;
      reward: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    /**
     * the contracts balance
     */
    getContractBalance(): NonPayableTransactionObject<string>;

    /**
     * get addresses in pending set
     */
    getPendingParticipnts(): NonPayableTransactionObject<string[]>;

    /**
     * get addresses in accepted set
     */
    getAcceptedParticipants(): NonPayableTransactionObject<string[]>;

    /**
     * returns patient struct for address
     */
    getParticipant(
      _address: string
    ): NonPayableTransactionObject<{
      accepted: boolean;
      completed: boolean;
      reward: string;
      0: boolean;
      1: boolean;
      2: string;
    }>;

    /**
     * allows address to withdraw wei from contract if completed for participant is true
     */
    withdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    LogAcceptedParticipnt(cb?: Callback<LogAcceptedParticipnt>): EventEmitter;
    LogAcceptedParticipnt(
      options?: EventOptions,
      cb?: Callback<LogAcceptedParticipnt>
    ): EventEmitter;

    LogApplyForResearchProject(
      cb?: Callback<LogApplyForResearchProject>
    ): EventEmitter;
    LogApplyForResearchProject(
      options?: EventOptions,
      cb?: Callback<LogApplyForResearchProject>
    ): EventEmitter;

    LogHardCapUpdate(cb?: Callback<LogHardCapUpdate>): EventEmitter;
    LogHardCapUpdate(
      options?: EventOptions,
      cb?: Callback<LogHardCapUpdate>
    ): EventEmitter;

    LogProjectEnded(cb?: Callback<LogProjectEnded>): EventEmitter;
    LogProjectEnded(
      options?: EventOptions,
      cb?: Callback<LogProjectEnded>
    ): EventEmitter;

    LogProjectInRegistration(
      cb?: Callback<LogProjectInRegistration>
    ): EventEmitter;
    LogProjectInRegistration(
      options?: EventOptions,
      cb?: Callback<LogProjectInRegistration>
    ): EventEmitter;

    LogProjectStarted(cb?: Callback<LogProjectStarted>): EventEmitter;
    LogProjectStarted(
      options?: EventOptions,
      cb?: Callback<LogProjectStarted>
    ): EventEmitter;

    LogRejectedParticipnt(cb?: Callback<LogRejectedParticipnt>): EventEmitter;
    LogRejectedParticipnt(
      options?: EventOptions,
      cb?: Callback<LogRejectedParticipnt>
    ): EventEmitter;

    LogRewardUpdate(cb?: Callback<LogRewardUpdate>): EventEmitter;
    LogRewardUpdate(
      options?: EventOptions,
      cb?: Callback<LogRewardUpdate>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "LogAcceptedParticipnt",
    cb: Callback<LogAcceptedParticipnt>
  ): void;
  once(
    event: "LogAcceptedParticipnt",
    options: EventOptions,
    cb: Callback<LogAcceptedParticipnt>
  ): void;

  once(
    event: "LogApplyForResearchProject",
    cb: Callback<LogApplyForResearchProject>
  ): void;
  once(
    event: "LogApplyForResearchProject",
    options: EventOptions,
    cb: Callback<LogApplyForResearchProject>
  ): void;

  once(event: "LogHardCapUpdate", cb: Callback<LogHardCapUpdate>): void;
  once(
    event: "LogHardCapUpdate",
    options: EventOptions,
    cb: Callback<LogHardCapUpdate>
  ): void;

  once(event: "LogProjectEnded", cb: Callback<LogProjectEnded>): void;
  once(
    event: "LogProjectEnded",
    options: EventOptions,
    cb: Callback<LogProjectEnded>
  ): void;

  once(
    event: "LogProjectInRegistration",
    cb: Callback<LogProjectInRegistration>
  ): void;
  once(
    event: "LogProjectInRegistration",
    options: EventOptions,
    cb: Callback<LogProjectInRegistration>
  ): void;

  once(event: "LogProjectStarted", cb: Callback<LogProjectStarted>): void;
  once(
    event: "LogProjectStarted",
    options: EventOptions,
    cb: Callback<LogProjectStarted>
  ): void;

  once(
    event: "LogRejectedParticipnt",
    cb: Callback<LogRejectedParticipnt>
  ): void;
  once(
    event: "LogRejectedParticipnt",
    options: EventOptions,
    cb: Callback<LogRejectedParticipnt>
  ): void;

  once(event: "LogRewardUpdate", cb: Callback<LogRewardUpdate>): void;
  once(
    event: "LogRewardUpdate",
    options: EventOptions,
    cb: Callback<LogRewardUpdate>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
